# apply 
prepare_cfg:
  # a function that takes (batch)
  batch: # null
    _partial_: true
    _target_: src.tasks.retrieval.utils.get_hidden_states
  outputs:
    _partial_: true
    _target_: src.tasks.token_classification.utils.get_last_hidden_state
  # outputs: null
    # _partial_: true
    # _target_: src.tasks.retrieval.utils.get_embeds
    # # n_layers: [8]
    # pool_type: "mean"
  # a function that takes (outputs, batch)
  # step_outputs: null
  step_outputs:
      _partial_: true
      _target_: src.tasks.token_classification.eval.layer_cka
  #     _target_: src.tasks.retrieval.utils.cosine_sim
      # _target_: src.tasks.retrieval.utils.pair_wise_loop
      # pair_wise_metric:
      #   _partial_: true
      #   _target_: src.modules.functional.metrics.bert_score

# str or list of non-conflicting keys
step_outputs:
  outputs:
    - "logits"
    - "hidden_states"
  batch:
    - "attention_mask"

# either metrics or val_metrics and test_metrics
# where the latter
metrics_cfg:
  # name of the metric used eg for logging
  cka:
    # instructions to instantiate metric, preferrably torchmetrics.Metric
    metric:
      _partial_: true
      # _target_: src.modules.functional.metrics.cka
      # _target_: src.modules.functional.metrics.mean_bert_score
      # _target_: src.tasks.retrieval.utils.mean_cosine_sim
      # _target_: src.tasks.token_classification.eval.sent_cka
      _target_: src.tasks.token_classification.eval.identity
    # either on_step: true or on_epoch: true
    compute_on: "epoch_end"
    kwargs: 
      x: "outputs:cka"
      # embeds: "outputs:embeds"
      # logits: "outputs:logits"
      # hidden_states: "outputs:hidden_states"
      # attention_mask: "outputs:attention_mask"
